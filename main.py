import random
import telebot
import os
from telebot import types
from telebot.handler_backends import State, StatesGroup

from data_base_models import (
    new_user_for_db,
    words,
    update_step_user_db,
    select_step_user_db,
    add_word_user,
    delete_word_user,
)

os.environ["token"] = input("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–∂–∂–ª")
bot = telebot.TeleBot(os.environ["token"])


class Command:
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫.
    ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"
    NEXT = "–î–∞–ª—å—à–µ ‚è≠"


class MyStates(StatesGroup):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç–µ–π—Ç–æ–≤.
    translate_word = State()
    next_word = State()
    add_word = State()
    new_word = State()
    delete_word = State()


def check_user_step(chat_id: int):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ —à–∞–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ë–î.
    step = select_step_user_db(chat_id)
    if step is not None:
        return step
    elif step is None:
        new_user_for_db(chat_id)
        return 1


@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.reply_to(
        message,
        """–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
        –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
        –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
        - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
        - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
        –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è
        –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /Go –¥–ª—è –Ω–∞—á–∞–ª–∞
    """,
    )


@bot.message_handler(commands=["Go", "go"])
def english_traning(message):
    """
    –ü–æ –≤–≤–æ–¥—É –∫–æ–º–∞–Ω–¥—ã /Go –∏–ª–∏ /go:
        1. –ü–æ–ª—É—á–∞–µ—Ç —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        2. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ, —É–¥–∞–ª–µ–Ω–Ω—ã–µ, –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
            –ü—Ä–∏ –≤–æ–≤–∑—Ä–∞—Ç–∞ None –æ–±–Ω—É–ª—è–µ—Ç —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ 1
        3. –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏
        4. –§–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç–µ–π—Ç
        5. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ
    """

    step = check_user_step(message.chat.id)
    game_words = words(message.chat.id, step)
    if game_words is None:
        update_step_user_db(message.chat.id, 1)
        step = check_user_step(message.chat.id)
        game_words = words(message.chat.id, step)
    markup = types.ReplyKeyboardMarkup(row_width=2)
    translate_words_btn = types.KeyboardButton(game_words[2])
    option_words_btn = [types.KeyboardButton(word) for word in game_words[3:]]
    buttons = [translate_words_btn] + option_words_btn
    random.shuffle(buttons)
    nxt_btn = types.KeyboardButton(Command.NEXT)
    add_bt = types.KeyboardButton(Command.ADD_WORD)
    delete_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([nxt_btn, add_bt, delete_btn])
    markup.add(*buttons)
    bot.send_message(
        message.chat.id,
        f"–ù–∞–∑–æ–≤–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {game_words[1]}",
        reply_markup=markup,
    )
    bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["translate_word"] = game_words[2]


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_word(message):
    step = check_user_step(message.chat.id)
    try:  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        step = step[0] + 1
    except TypeError:
        pass
    update_step_user_db(message.chat.id, step)
    english_traning(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def set_state_add_word(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ, –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
    )
    bot.set_state(message.from_user.id, MyStates.new_word, message.chat.id)


@bot.message_handler(
    func=lambda message: bot.get_state(message.chat.id) == MyStates.new_word.name
)
def add_word(message):
    result = add_word_user((message.text).split(","), message.chat.id)
    if type(result) == tuple:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        nxt_btn = types.KeyboardButton(Command.NEXT)
        markup.add(nxt_btn)
        bot.send_message(
            message.chat.id,
            f"–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Å–µ–π—á–∞—Å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {result[0]} —Å–ª–æ–≤–∞(–æ–≤)",
            reply_markup=markup,
        )
    elif result == "–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ":
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def set_state_delete_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    bot.set_state(message.from_user.id, MyStates.delete_word, message.chat.id)


@bot.message_handler(
    func=lambda message: bot.get_state(message.chat.id) == MyStates.delete_word.name
)
def delete_word(message):
    result = delete_word_user(message.text, message.chat.id)
    if type(result) == tuple:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        nxt_btn = types.KeyboardButton(Command.NEXT)
        markup.add(nxt_btn)
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=markup)
    elif result == "–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ":
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
    elif result == "–î–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –∏–∑—É—á–∞–µ–º—ã—Ö –≤–∞–º–∏ —Å–ª–æ–≤":
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –∏–∑—É—á–∞–µ–º—ã—Ö –≤–∞–º–∏ —Å–ª–æ–≤")
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@bot.message_handler(func=lambda message: True, content_types=["text"])
def message_reply(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        translate_word = data.get("translate_word")
        if translate_word is None:
            bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ /Go")
            return
        if message.text == translate_word:
            markup = types.ReplyKeyboardMarkup(row_width=2)
            nxt_btn = types.KeyboardButton(Command.NEXT)
            add_bt = types.KeyboardButton(Command.ADD_WORD)
            delete_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons = [nxt_btn, add_bt, delete_btn]
            markup.add(*buttons)
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")


if __name__ == "__main__":
    print("—Ä–∞–±–æ—Ç–∞–µ—Ç")
    bot.polling()
